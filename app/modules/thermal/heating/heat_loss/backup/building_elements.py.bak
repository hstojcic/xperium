"""
Moduli za upravljanje građevinskim elementima (prozori, vrata, itd.)
"""

import streamlit as st
import uuid  # Dodan import za uuid

class WindowType:  # Preimenovano iz ProzorElement
    """
    Klasa koja predstavlja jedan tip prozora
    """
    def __init__(self, id, naziv, u_vrijednost, sirina=1.2, visina=1.2, opis=""):
        self.id = id
        self.naziv = naziv
        self.sirina = float(sirina)
        self.visina = float(visina)
        self.povrsina = self.sirina * self.visina
        self.u_vrijednost = float(u_vrijednost)
        self.opis = opis

    def to_dict(self):
        return {
            "id": self.id,
            "naziv": self.naziv,
            "sirina": self.sirina,
            "visina": self.visina,
            "povrsina": self.povrsina,
            "u_vrijednost": self.u_vrijednost,
            "opis": self.opis
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            naziv=data.get("naziv"),
            u_vrijednost=data.get("u_vrijednost"),
            sirina=data.get("sirina", 1.2),
            visina=data.get("visina", 1.2),
            opis=data.get("opis", "")
        )

class DoorType:  # Preimenovano iz VrataElement
    """
    Klasa koja predstavlja jedan tip vrata
    """
    def __init__(self, id, naziv, u_vrijednost, sirina=0.9, visina=2.0, opis="", unutarnja=False, tip_vrata="vanjska"): # DODANO: tip_vrata
        self.id = id
        self.naziv = naziv
        self.sirina = float(sirina)
        self.visina = float(visina)
        self.povrsina = self.sirina * self.visina
        self.u_vrijednost = float(u_vrijednost)
        self.opis = opis
        self.unutarnja = unutarnja # Ovaj atribut se može razmotriti za uklanjanje ako tip_vrata pokriva njegovu funkcionalnost
        self.tip_vrata = tip_vrata # NOVI ATRIBUT

    def to_dict(self):
        return {
            "id": self.id,
            "naziv": self.naziv,
            "sirina": self.sirina,
            "visina": self.visina,
            "povrsina": self.povrsina,
            "u_vrijednost": self.u_vrijednost,
            "opis": self.opis,
            "unutarnja": self.unutarnja,
            "tip_vrata": self.tip_vrata # DODANO: tip_vrata
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            naziv=data.get("naziv"),
            u_vrijednost=data.get("u_vrijednost"),
            sirina=data.get("sirina", 0.9),
            visina=data.get("visina", 2.0),
            opis=data.get("opis", ""),
            unutarnja=data.get("unutarnja", False),
            tip_vrata=data.get("tip_vrata", "vanjska") # DODANO: tip_vrata
        )

class ProzorInstance:
    """
    Klasa koja predstavlja instancu prozora na zidu
    """
    def __init__(self, id, tip_id, tip_naziv):
        self.id = id
        self.tip_id = tip_id
        self.tip_naziv = tip_naziv
        self.sirna = None
        self.visina = None
        self.povrsina = None
        self.koristiti_standardne_dimenzije = True

    def to_dict(self):
        return {
            "id": self.id,
            "tip_id": self.tip_id,
            "tip_naziv": self.tip_naziv,
            "sirna": self.sirna,
            "visina": self.visina,
            "povrsina": self.povrsina,
            "koristiti_standardne_dimenzije": self.koristiti_standardne_dimenzije,
        }

    @classmethod
    def from_dict(cls, data):
        instance = cls(
            id=data.get("id"),
            tip_id=data.get("tip_id"),
            tip_naziv=data.get("tip_naziv"),
        )
        instance.sirna = data.get("sirna")
        instance.visina = data.get("visina")
        instance.povrsina = data.get("povrsina")
        instance.koristiti_standardne_dimenzije = data.get("koristiti_standardne_dimenzije", True)
        return instance

class VrataInstance:
    """
    Klasa koja predstavlja instancu vrata na zidu
    """
    def __init__(self, id, tip_id, tip_naziv):
        self.id = id
        self.tip_id = tip_id
        self.tip_naziv = tip_naziv
        self.sirna = None
        self.visina = None
        self.povrsina = None
        self.koristiti_standardne_dimenzije = True

    def to_dict(self):
        return {
            "id": self.id,
            "tip_id": self.tip_id,
            "tip_naziv": self.tip_naziv,
            "sirna": self.sirna,
            "visina": self.visina,
            "povrsina": self.povrsina,
            "koristiti_standardne_dimenzije": self.koristiti_standardne_dimenzije,
        }

    @classmethod
    def from_dict(cls, data):
        instance = cls(
            id=data.get("id"),
            tip_id=data.get("tip_id"),
            tip_naziv=data.get("tip_naziv"),
        )
        instance.sirna = data.get("sirna")
        instance.visina = data.get("visina")
        instance.povrsina = data.get("povrsina")
        instance.koristiti_standardne_dimenzije = data.get("koristiti_standardne_dimenzije", True)
        return instance

class WallType:
    """
    Klasa koja predstavlja jedan tip zida
    """
    def __init__(self, id, naziv, debljina, u_vrijednost, opis="", tip="vanjski"):
        self.id = id
        self.naziv = naziv
        self.debljina = debljina  # u cm
        self.u_vrijednost = u_vrijednost
        self.opis = opis
        self.tip = tip  # vanjski, unutarnji, negrijani

    def to_dict(self):
        return {
            "id": self.id,
            "naziv": self.naziv,
            "debljina": self.debljina,
            "u_vrijednost": self.u_vrijednost,
            "opis": self.opis,
            "tip": self.tip
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            naziv=data.get("naziv"),
            debljina=data.get("debljina"),
            u_vrijednost=data.get("u_vrijednost"),
            opis=data.get("opis", ""),
            tip=data.get("tip", "vanjski")
        )

class FloorType:
    """
    Klasa koja predstavlja jedan tip poda
    """
    def __init__(self, id, naziv, debljina, u_vrijednost, opis="", tip="tlo"):
        self.id = id
        self.naziv = naziv
        self.debljina = debljina  # u cm
        self.u_vrijednost = u_vrijednost
        self.opis = opis
        self.tip = tip  # tlo, negrijani, međukatna, vanjski

    def to_dict(self):
        return {
            "id": self.id,
            "naziv": self.naziv,
            "debljina": self.debljina,
            "u_vrijednost": self.u_vrijednost,
            "opis": self.opis,
            "tip": self.tip
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            naziv=data.get("naziv"),
            debljina=data.get("debljina"),
            u_vrijednost=data.get("u_vrijednost"),
            opis=data.get("opis", ""),
            tip=data.get("tip", "tlo")
        )

class CeilingType:
    """
    Klasa koja predstavlja jedan tip stropa
    """
    def __init__(self, id, naziv, debljina, u_vrijednost, opis="", tip="ravan_krov"):
        self.id = id
        self.naziv = naziv
        self.debljina = debljina  # u cm
        self.u_vrijednost = u_vrijednost
        self.opis = opis
        self.tip = tip  # ravan_krov, kosi_krov, tavan, negrijani

    def to_dict(self):
        return {
            "id": self.id,
            "naziv": self.naziv,
            "debljina": self.debljina,
            "u_vrijednost": self.u_vrijednost,
            "opis": self.opis,
            "tip": self.tip
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            naziv=data.get("naziv"),
            debljina=data.get("debljina"),
            u_vrijednost=data.get("u_vrijednost"),
            opis=data.get("opis", ""),
            tip=data.get("tip", "ravan_krov")
        )

class WallElements:
    """
    Klasa koja predstavlja elemente na zidu (prozore i vrata)
    """
    def __init__(self):
        self.prozori = []  # Lista instanci prozora na zidu
        self.vrata = []    # Lista instanci vrata na zidu
        self._next_prozor_id = 1
        self._next_vrata_id = 1
    
    def dodaj_prozor(self, tip_id, tip_naziv):
        """Dodaje novi prozor na zid"""
        prozor = ProzorInstance(self._next_prozor_id, tip_id, tip_naziv)
        self.prozori.append(prozor)
        self._next_prozor_id += 1
        return prozor
    
    def dodaj_vrata(self, tip_id, tip_naziv):
        """Dodaje nova vrata na zid"""
        vrata = VrataInstance(self._next_vrata_id, tip_id, tip_naziv)
        self.vrata.append(vrata)
        self._next_vrata_id += 1
        return vrata
    
    def ukloni_prozor(self, prozor_id):
        """Uklanja prozor sa zida prema ID-u"""
        self.prozori = [p for p in self.prozori if p.id != prozor_id]
    
    def ukloni_vrata(self, vrata_id):
        """Uklanja vrata sa zida prema ID-u"""
        self.vrata = [v for v in self.vrata if v.id != vrata_id]
    
    def izracunaj_ukupnu_povrsinu_prozora(self, elements_model):
        """
        Izračunava ukupnu površinu svih prozora na zidu
        
        Parameters:
        -----------
        elements_model : BuildingElementsModel
            Model s definiranim tipovima elemenata
            
        Returns:
        --------
        float
            Ukupna površina prozora u m²
        """
        ukupna_povrsina = 0
        for prozor in self.prozori:
            # Ako se koriste standardne dimenzije, koristimo dimenzije iz tipa prozora
            if prozor.koristiti_standardne_dimenzije:
                # Pronađi tip prozora u modelu
                tip_prozora = next((p for p in elements_model.prozori if p.id == prozor.tip_id), None)
                if tip_prozora:
                    ukupna_povrsina += tip_prozora.povrsina
            else:
                # Inače koristi vlastite dimenzije
                if prozor.povrsina:
                    ukupna_povrsina += prozor.povrsina
        
        return ukupna_povrsina
    
    def izracunaj_ukupnu_povrsinu_vrata(self, elements_model):
        """
        Izračunava ukupnu površinu svih vrata na zidu
        
        Parameters:
        -----------
        elements_model : BuildingElementsModel
            Model s definiranim tipovima elemenata
            
        Returns:
        --------
        float
            Ukupna površina vrata u m²
        """
        ukupna_povrsina = 0
        for vrata in self.vrata:
            # Ako se koriste standardne dimenzije, koristimo dimenzije iz tipa vrata
            if vrata.koristiti_standardne_dimenzije:
                # Pronađi tip vrata u modelu
                tip_vrata = next((v for v in elements_model.vrata if v.id == vrata.tip_id), None)
                if tip_vrata:
                    ukupna_povrsina += tip_vrata.povrsina
            else:
                # Inače koristi vlastite dimenzije
                if vrata.povrsina:
                    ukupna_povrsina += vrata.povrsina
        
        return ukupna_povrsina

    def to_dict(self):
        return {
            "prozori": [p.to_dict() for p in self.prozori],
            "vrata": [v.to_dict() for v in self.vrata],
            "_next_prozor_id": self._next_prozor_id,
            "_next_vrata_id": self._next_vrata_id,
        }

    @classmethod
    def from_dict(cls, data):
        instance = cls()
        instance.prozori = [ProzorInstance.from_dict(p_data) for p_data in data.get("prozori", [])]
        instance.vrata = [VrataInstance.from_dict(v_data) for v_data in data.get("vrata", [])]
        instance._next_prozor_id = data.get("_next_prozor_id", 1)
        instance._next_vrata_id = data.get("_next_vrata_id", 1)
        return instance

class BuildingElementsModel:
    """
    Model za upravljanje svim tipovima građevinskih elemenata.
    """
    def __init__(self):
        self.zidovi = []
        self.podovi = []
        self.stropovi = []
        self.prozori = []  # Ovo će sada sadržavati instance WindowType
        self.vrata = []    # Ovo će sada sadržavati instance DoorType
        self._ucitaj_elemente()

    def _ucitaj_elemente(self):
        """Učitava spremljene tipove elemenata iz session state-a."""
        if 'building_elements_data' in st.session_state:
            data = st.session_state.building_elements_data
            self.zidovi = [WallType.from_dict(z_data) for z_data in data.get('zidovi', [])]
            self.podovi = [FloorType.from_dict(p_data) for p_data in data.get('podovi', [])]
            self.stropovi = [CeilingType.from_dict(s_data) for s_data in data.get('stropovi', [])]
            self.prozori = [WindowType.from_dict(pr_data) for pr_data in data.get('prozori', [])]
            self.vrata = [DoorType.from_dict(vr_data) for vr_data in data.get('vrata', [])]
        else:
            # Ako nema spremljenih podataka, inicijaliziraj s praznim listama (već napravljeno u __init__)
            # Možda dodati neke defaultne elemente ako je potrebno
            pass

    def spremi_elemente(self):
        """Sprema trenutno stanje svih tipova elemenata u session state."""
        if 'building_elements_data' not in st.session_state:
            st.session_state.building_elements_data = {}
        
        st.session_state.building_elements_data['zidovi'] = [z.to_dict() for z in self.zidovi]
        st.session_state.building_elements_data['podovi'] = [p.to_dict() for p in self.podovi]
        st.session_state.building_elements_data['stropovi'] = [s.to_dict() for s in self.stropovi]
        st.session_state.building_elements_data['prozori'] = [pr.to_dict() for pr in self.prozori]
        st.session_state.building_elements_data['vrata'] = [vr.to_dict() for vr in self.vrata]

    def _generiraj_id(self, element_type):
        return f"{element_type}_{uuid.uuid4().hex[:8]}"

    def dodaj_zid(self, naziv, debljina, u_vrijednost, tip="vanjski", opis=""):
        zid_id = self._generiraj_id("zid")
        novi_zid = WallType(id=zid_id, naziv=naziv, debljina=float(debljina), u_vrijednost=float(u_vrijednost), tip=tip, opis=opis)
        self.zidovi.append(novi_zid)
        return novi_zid

    def obrisi_zid(self, zid_id):
        self.zidovi = [zid for zid in self.zidovi if zid.id != zid_id]

    def dodaj_pod(self, naziv, u_vrijednost, tip="tlo", debljina=None, opis=""): 
        pod_id = self._generiraj_id("pod")
        debljina_float = float(debljina) if debljina is not None and debljina != '' else None
        novi_pod = FloorType(id=pod_id, naziv=naziv, debljina=debljina_float, u_vrijednost=float(u_vrijednost), tip=tip, opis=opis)
        self.podovi.append(novi_pod)
        return novi_pod

    def obrisi_pod(self, pod_id):
        self.podovi = [pod for pod in self.podovi if pod.id != pod_id]

    def dodaj_strop(self, naziv, u_vrijednost, tip="ravan_krov", debljina=None, opis=""): 
        strop_id = self._generiraj_id("strop")
        debljina_float = float(debljina) if debljina is not None and debljina != '' else None
        novi_strop = CeilingType(id=strop_id, naziv=naziv, debljina=debljina_float, u_vrijednost=float(u_vrijednost), tip=tip, opis=opis)
        self.stropovi.append(novi_strop)
        return novi_strop

    def obrisi_strop(self, strop_id):
        self.stropovi = [strop for strop in self.stropovi if strop.id != strop_id]

    def dodaj_prozor(self, naziv, u_vrijednost, sirina=1.2, visina=1.2, opis=""):
        prozor_id = self._generiraj_id("prozor")
        novi_prozor = WindowType(id=prozor_id, naziv=naziv, u_vrijednost=float(u_vrijednost), opis=opis, sirina=float(sirina), visina=float(visina))
        self.prozori.append(novi_prozor)
        return novi_prozor

    def obrisi_prozor(self, prozor_id):
        self.prozori = [prozor for prozor in self.prozori if prozor.id != prozor_id]

    def dodaj_vrata(self, naziv, u_vrijednost, sirina=0.9, visina=2.0, opis="", unutarnja=False, tip_vrata="vanjska"): # DODANO: tip_vrata argument
        vrata_id = self._generiraj_id("vrata")
        # Proslijeđivanje tip_vrata u konstruktor DoorType
        nova_vrata = DoorType(id=vrata_id, naziv=naziv, u_vrijednost=float(u_vrijednost), opis=opis, sirina=float(sirina), visina=float(visina), unutarnja=unutarnja, tip_vrata=tip_vrata)
        self.vrata.append(nova_vrata)
        return nova_vrata

    def obrisi_vrata(self, vrata_id):
        self.vrata = [vrata for vrata in self.vrata if vrata.id != vrata_id]

def inicijaliziraj_elemente():
    """
    Inicijalizira model građevinskih elemenata.
    Ako podaci postoje u session_state, učitava ih.
    Ako ne postoje ili su prazni, dodaje defaultne elemente.
    Sprema konačno stanje modela u session_state.
    """
    model = BuildingElementsModel()  # Automatski poziva _ucitaj_elemente()

    # Provjeri jesu li liste elemenata prazne nakon pokušaja učitavanja.
    # Ovo pokriva slučaj kada 'building_elements_data' ne postoji
    # ili postoji, ali su liste elemenata u njemu prazne.
    if not model.zidovi and \
       not model.podovi and \
       not model.stropovi and \
       not model.prozori and \
       not model.vrata:
        _dodaj_default_elemente(model)
    
    model.spremi_elemente()  # Spremi trenutno stanje (bilo učitano ili s defaultima)
    return model

def _dodaj_default_elemente(model):
    """
    Dodaje defaultne tipove elemenata u model
    
    Parameters:
    -----------
    model : BuildingElementsModel
        Model u koji se dodaju defaultni elementi
    """
    # Dodajemo nekoliko tipičnih prozora
    model.dodaj_prozor(naziv="Jednokrilni prozor", u_vrijednost=1.1, sirina=0.6, visina=1.0, opis="Jednokrilni prozor, dvostruko staklo") # U-value was 0.6, likely a typo, common U-value is 1.1-1.4
    model.dodaj_prozor(naziv="Dvokrilni prozor", u_vrijednost=1.1, sirina=1.2, visina=1.4, opis="Dvokrilni prozor, dvostruko staklo")
    model.dodaj_prozor(naziv="Balkonska vrata", u_vrijednost=1.1, sirina=0.9, visina=2.2, opis="Balkonska vrata, dvostruko staklo")
    
    # Dodajemo nekoliko tipičnih vrata
    model.dodaj_vrata(naziv="Ulazna vrata", u_vrijednost=1.3, sirina=1.0, visina=2.1, opis="Ulazna vrata, izolirana", tip_vrata="vanjska")
    model.dodaj_vrata(naziv="Unutarnja vrata", u_vrijednost=2.0, sirina=0.9, visina=2.05, opis="Unutarnja vrata, drvena", unutarnja=True, tip_vrata="unutarnja")
    # Balkonska vrata are usually like windows in terms of U-value, 1.4 is reasonable.
    model.dodaj_vrata(naziv="Balkonska vrata staklena", u_vrijednost=1.4, sirina=0.8, visina=2.05, opis="Balkonska vrata, staklena", tip_vrata="vanjska") # Pretpostavljamo da su balkonska vrata vanjska
    
    # Dodajemo tipične tipove zidova
    from .constants import DEFAULT_WALL_TYPES
    for wall_type in DEFAULT_WALL_TYPES:
        model.dodaj_zid(
            naziv=wall_type["naziv"],
            debljina=wall_type["debljina"],
            u_vrijednost=wall_type["u_vrijednost"],
            tip=wall_type.get("tip", "vanjski"), # Use .get for safety
            opis=wall_type.get("opis", "")      # Use .get for safety
        )
    
    # Dodajemo tipične tipove podova
    from .constants import DEFAULT_FLOOR_TYPES
    for floor_type in DEFAULT_FLOOR_TYPES:
        model.dodaj_pod(
            naziv=floor_type["naziv"],
            u_vrijednost=floor_type["u_vrijednost"],
            tip=floor_type.get("tip", "tlo"),          # Use .get for safety
            debljina=floor_type.get("debljina"),     # Use .get for safety, allows None
            opis=floor_type.get("opis", "")          # Use .get for safety
        )
    
    # Dodajemo tipične tipove stropova
    from .constants import DEFAULT_CEILING_TYPES
    for ceiling_type in DEFAULT_CEILING_TYPES:
        model.dodaj_strop(
            naziv=ceiling_type["naziv"],
            u_vrijednost=ceiling_type["u_vrijednost"],
            tip=ceiling_type.get("tip", "ravan_krov"), # Use .get for safety
            debljina=ceiling_type.get("debljina"),   # Use .get for safety, allows None
            opis=ceiling_type.get("opis", "")        # Use .get for safety
        )